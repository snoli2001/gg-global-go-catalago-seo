---
import type { Moto } from "../../types/moto.interface";
import type { Dealer } from "../../types/dealer.interface";

interface Props {
  motos: Moto[];
  placeholder?: string;
  dealer?: Dealer;
}

const { motos, placeholder = "Encuentra tu moto favorita", dealer } = Astro.props;
---

<div class="w-full" id="search-container">
  <div class="relative">
    <input
      type="text"
      id="search-input"
      placeholder={placeholder}
      class="w-full px-4 py-3 pl-12 rounded-lg border-2 border-gg-blue-700 focus:outline-none focus:border-gg-blue-800 text-gray-700 placeholder-gray-500"
    />
    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        stroke-width="2"
        stroke="currentColor"
        class="w-6 h-6 text-gray-400"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"
        />
      </svg>
    </div>

    <!-- Dropdown de resultados -->
    <div
      id="search-results"
      class="hidden absolute mt-2 w-full bg-white rounded-lg shadow-lg border border-gray-200 max-h-96 overflow-y-auto z-50"
    >
    </div>
  </div>
</div>

<script define:vars={{ motos }}>
  // Función para obtener la imagen del banner
  function getBannerImage(moto) {
    const bannerImages = moto.carrusels.filter(
      (carrusel) => carrusel.type === "B"
    );
    return bannerImages[0]?.imagen || "/imgs/moto.png";
  }

  // Función para crear el elemento de resultado
  function createResultElement(moto) {
    const button = document.createElement('button');
    button.className = 'w-full flex items-center gap-4 p-3 hover:bg-gray-50 transition-colors text-left';
    button.onclick = () => {
      const targetUrl = dealer 
        ? `/dealers/${dealer.slug}/motos/${moto.code}`
        : `/motos/${moto.code}`;
      window.location.href = targetUrl;
    };

    const price = moto.currency.toLowerCase() === 'dolar' ? moto.price_dollar : moto.precio;
    const formattedPrice = new Intl.NumberFormat(moto.currency.toLowerCase() === 'dolar' ? 'en-US' : 'es-PE', {
      style: 'currency',
      currency: moto.currency.toLowerCase() === 'dolar' ? 'USD' : 'PEN'
    }).format(price);

    button.innerHTML = `
      <div class="w-16 h-16 flex-shrink-0">
        <img
          src="${getBannerImage(moto)}"
          alt="${moto.modelo}"
          class="w-full h-full object-contain rounded-lg"
        />
      </div>
      <div class="flex-grow">
        <p class="text-gray-900 font-medium">
          ${moto.marca} - ${moto.modelo}
        </p>
        <p class="text-sm text-gray-500">${moto.categoria}</p>
        <div class="flex items-center gap-2 mt-1">
          <span class="text-sm font-medium text-gg-blue-700">${formattedPrice}</span>
          ${moto.isPreOwned ? '<span class="text-xs px-2 py-0.5 bg-yellow-100 text-yellow-800 rounded-full">Seminueva</span>' : ''}
        </div>
      </div>
    `;

    return button;
  }

  // Elementos del DOM
  const searchContainer = document.getElementById('search-container');
  const searchInput = document.getElementById('search-input');
  const searchResults = document.getElementById('search-results');

  // Manejador de búsqueda
  function handleSearch(e) {
    const value = e.target.value.toLowerCase();
    
    if (value.trim() === '') {
      searchResults.classList.add('hidden');
      searchResults.innerHTML = '';
      return;
    }

    const results = motos
      .filter((moto) => 
        moto.modelo.toLowerCase().includes(value) ||
        moto.marca.toLowerCase().includes(value)
      )
      .slice(0, 5);

    searchResults.innerHTML = '';
    
    if (results.length > 0) {
      results.forEach(moto => {
        searchResults.appendChild(createResultElement(moto));
      });
      searchResults.classList.remove('hidden');
    } else {
      searchResults.classList.add('hidden');
    }
  }

  // Event listeners
  searchInput.addEventListener('input', handleSearch);
  searchInput.addEventListener('focus', (e) => {
    if (e.target.value.trim() !== '') {
      handleSearch(e);
    }
  });

  // Click fuera para cerrar
  document.addEventListener('click', (e) => {
    if (!searchContainer.contains(e.target)) {
      searchResults.classList.add('hidden');
    }
  });
</script> 