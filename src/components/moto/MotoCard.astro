---
// MotoCard.astro
import type { Moto } from "../../types/moto.interface";
import type { Color } from "../../types/moto.interface";
import env from "../../config/env";
import { Image } from "astro:assets";
const { moto } = Astro.props;

const formatPrice = (price: number, currency: string): string => {
  if (currency.toLowerCase() === "sol") {
    return new Intl.NumberFormat("es-PE", {
      style: "currency",
      currency: "PEN",
    }).format(price);
  }
  return new Intl.NumberFormat("en-US", {
    style: "currency",
    currency: "USD",
  }).format(price);
};

const hasColorImage = (moto: Moto, colorId: number): boolean => {
  return moto.carrusels.some(
    (carrusel) => carrusel.type === "B" && carrusel.color_id === colorId
  );
};

const toTitleCase = (str: string): string => {
  return str
    .split(" ")
    .map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
    .join(" ");
};

const getBannerImage = (moto: Moto): string => {
  const bannerImages = moto.carrusels.filter(
    (carrusel) => carrusel.type === "B"
  );

  for (const color of moto.colores) {
    const bannerImage = bannerImages.find(
      (img) => img.color_id === color.color_id
    );
    if (bannerImage) {
      return bannerImage.imagen;
    }
  }

  return "/imgs/moto.png";
};

const calculateMonthlyPayment = (
  price: number,
  annualInterestRate: number,
  months: number
): number => {
  const monthlyRate = annualInterestRate / 52 / 100;
  const numerator = monthlyRate * Math.pow(1 + monthlyRate, months);
  const denominator = Math.pow(1 + monthlyRate, months) - 1;
  return price * (numerator / denominator);
};

const getCategoryClass = (categoria: string): string => {
  const baseClasses =
    "absolute top-3 -left-3 text-sm text-white rounded-md px-2 py-1";

  const bgColorMap: Record<string, string> = {
    "Touring - Viajeras": "bg-purple-700",
    "Enduro - Cross": "bg-yellow-600",
    Deportiva: "bg-red-600",
    Pistera: "bg-green-600",
    Scooter: "bg-orange-600",
    "Doble proposito - Todo Terreno": "bg-dark",
    "CafÃ© Racer": "bg-yellow-900",
  };

  const bgColor = bgColorMap[categoria] || "bg-gray-600";
  return `${baseClasses} ${bgColor}`;
};

interface ColorCircleProps {
  color: Color;
  selected?: boolean;
  disabled?: boolean;
  size?: number;
}

const ColorCircle = ({
  color,
  selected = false,
  disabled = false,
  size = 20,
}: ColorCircleProps) => {
  return `
    <div class="relative">
      <div
        class="rounded-full transition-transform border border-stroke ${
          !disabled ? "cursor-pointer hover:scale-110" : "opacity-30"
        } ${selected ? "ring-2 ring-gg-blue-700 ring-offset-2" : ""}"
        style="width: ${size}px; height: ${size}px; background-image: linear-gradient(to right, ${color.hex1}, ${color.hex2});"
      ></div>
      ${
        disabled
          ? `
        <div class="absolute inset-0 flex items-center justify-center">
          <div class="w-5 h-[1px] bg-gray-400 rotate-45 rounded-full"></div>
        </div>
      `
          : ""
      }
    </div>
  `;
};
---

<article
  class="border cursor-pointer border-stroke rounded-lg bg-white w-full group"
  data-moto
  data-id={moto.idModelo}
  data-marca={moto.marca}
  data-categoria={moto.categoria}
  data-transmision={moto.transmision}
  data-precio={moto.precio}
  data-cilindrada={moto.cilindrada}
  data-rendimiento={moto.rendimiento}
  data-code={moto.code}
>
  <header class="flex relative">
    <div class="w-full aspect-[4/3] overflow-hidden px-4 pt-5 pb-3">
      <Image
        src={getBannerImage(moto)}
        alt={moto.modelo}
        class="object-contain h-auto w-full transition-all duration-300 group-hover:scale-105 group-hover:rotate-3"
        width={400}
        height={300}
        style={{ viewTransitionName: `moto-${moto.idModelo}` }}
      />
    </div>
    <div class={getCategoryClass(moto.categoria)}>
      {toTitleCase(moto.categoria)}
    </div>
    <div class="absolute top-3 right-4">
      <Image
        src={moto.logo}
        alt={moto.marca}
        class="w-12 h-auto"
        width={48}
        height={48}
        style={{ viewTransitionName: `moto-marca-${moto.idModelo}` }}
      />
    </div>
  </header>

  <section class="px-4">
    <div class="flex flex-col gap-0">
      <strong class="text-2xl -mt-0.5 text-dark font-medium truncate">
        {moto.modelo}
      </strong>
    </div>

    <div class="flex justify-between items-center py-1">
      <div class="flex flex-col">
        <span class="text-2xl font-medium text-gg-blue-700">
          {
            moto.currency.toLowerCase() === "sol"
              ? formatPrice(moto.precio, "sol")
              : formatPrice(moto.price_dollar, "usd")
          }
        </span>
        {
          Number(moto.fee_amount) > 0 && (
            <span class="text-gg-red-600 font-medium flex items-center gap-1">
              Desde{" "}
              {formatPrice(
                calculateMonthlyPayment(
                  moto.currency.toLowerCase() === "sol"
                    ? moto.precio
                    : moto.price_dollar,
                  75,
                  52
                ),
                moto.currency.toLowerCase()
              )}{" "}
              semanales
            </span>
          )
        }
      </div>
      <div class="flex items-center gap-2">
        <div class="flex items-center gap-1.5">
          {
            moto.colores
              .filter((color: Color) => hasColorImage(moto, color.color_id))
              .map((color: Color) => (
                <div
                  class="pointer-events-none"
                  set:html={ColorCircle({ color })}
                />
              ))
          }
        </div>
      </div>
    </div>
  </section>

  <footer class="pt-2 px-4 pb-4">
    <div class="flex flex-col gap-3">
      <div class="flex items-center gap-4">
        <div class="flex gap-2 items-center">
          <span class="text-sm text-primary-text">Cilindrada (CS):</span>
          <span class="text-sm text-primary-text">{moto.cilindrada}</span>
        </div>
        {
          moto.rendimiento && (
            <div class="flex gap-2 items-center">
              <span class="text-sm text-primary-text">Rendimiento:</span>
              <span class="text-sm text-primary-text">{moto.rendimiento}</span>
            </div>
          )
        }
      </div>
    </div>
  </footer>
</article>

<script>
  const cards = document.querySelectorAll<HTMLElement>("[data-moto]");

  cards.forEach((card) => {
    card.addEventListener("click", () => {
      const isInIframe = window !== window.parent;
      const motoCode = card.getAttribute("data-code");

      if (isInIframe && window.top) {
        window.top.location.href = `${import.meta.env.PUBLIC_MOTO_DETAIL_URL}?codigoMoto=${motoCode}`;
        return;
      }

      if ((document as any).startViewTransition) {
        (document as any).startViewTransition(() => {
          window.location.href = `/motos/${motoCode}`;
        });
      } else {
        window.location.href = `/motos/${motoCode}`;
      }
    });
  });
</script>
