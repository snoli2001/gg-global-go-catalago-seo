---
import { brandsService } from "../services/api/brands.service";
import { categoriesService } from "../services/api/categories.service";
import { motoService } from "../services/api/moto.service";
import { bannersService } from "../services/api/banners.service";
import type { Brand } from "../types/brand.interface";
import type { Category } from "../types/category.interface";
import type { Moto } from "../types/moto.interface";
import type { Dealer } from "../types/dealer.interface";
import SearchBar from "./ui/SearchBar.astro";
import MotoFiltersBar from "./MotoFiltersBar";
import BannerCarousel from "./ui/BannerCarousel";

export const prerender = true;

// Extract dealer prop (optional)
const { dealer }: { dealer?: Dealer } = Astro.props;

// Fetch critical data first
let brands: Brand[] = [];
let categories: Category[] = [];
let banners: any[] = [];
let initialMotos: Moto[] = [];

try {
  // Fetch all data in parallel including motos
  const [brandsData, categoriesData, bannersData, motosData] =
    await Promise.all([
      dealer
        ? brandsService.getBrandsByDealer(dealer.id)
        : brandsService.getBrandsByDealer("10"),
      categoriesService.getCategories(),
      dealer
        ? bannersService.getBannersByDealer(dealer.id)
        : bannersService.getBannersByDealer("10"),
      dealer
        ? motoService.getMotosByDealer(dealer.id)
        : motoService.getMotosByDealer("10"),
    ]);

  brands = brandsData;
  categories = categoriesData;
  banners = bannersData;
  initialMotos = motosData;
} catch (error) {
  console.error("‚ùå Error fetching data:", error);
  brands = [];
  categories = [];
  banners = [];
  initialMotos = [];
}
---

<div class="flex flex-col gap-6 px-4 pb-4 pt-0 lg:p-6 mx-auto max-w-screen-2xl">
  <div class="-mx-4 lg:mx-0">
    <BannerCarousel client:load banners={banners} />
  </div>

  <div class="w-full flex flex-col items-center lg:mb-8">
    {
      (!dealer || dealer.allow_pre_owned === "TRUE") && (
        <div class="hidden lg:block bg-white rounded-lg shadow-md p-3 mb-4 w-1/2">
          <div class="flex rounded-md overflow-hidden">
            <button
              class="flex-1 py-4 px-6 text-center font-medium text-lg transition-colors bg-gg-blue-700 text-white shadow-sm"
              data-tab="all"
            >
              Todas
            </button>
            <button
              class="flex-1 py-4 px-6 text-center font-medium text-lg transition-colors bg-gray-100 text-gray-700 hover:enabled:bg-gray-200 hover:enabled:text-gray-800"
              data-tab="new"
            >
              Nuevas
            </button>
            <button
              class="flex-1 py-4 px-6 text-center font-medium text-lg transition-colors bg-gray-100 text-gray-700 hover:enabled:bg-gray-200 hover:enabled:text-gray-800"
              data-tab="used"
            >
              Seminuevas
            </button>
          </div>
        </div>
      )
    }
    <SearchBar motos={initialMotos} />
  </div>

  <div class="flex flex-col lg:flex-row gap-6">
    <MotoFiltersBar
      client:load
      initialBrands={brands}
      initialCategories={categories}
      initialMotos={initialMotos}
      showPreOwnedTabs={!dealer || dealer.allow_pre_owned !== "FALSE"}
    />
  </div>
</div>

<script>
  // Handle tab clicks
  const tabButtons = document.querySelectorAll<HTMLButtonElement>("[data-tab]");

  tabButtons.forEach((button) => {
    button.addEventListener("click", () => {
      // Remove active class from all buttons
      tabButtons.forEach((btn) => {
        btn.classList.remove("bg-gg-blue-700", "text-white", "shadow-sm");
        btn.classList.add(
          "bg-gray-100",
          "text-gray-700",
          "hover:enabled:bg-gray-200",
          "hover:enabled:text-gray-800"
        );
      });

      // Add active class to clicked button and remove hover effect
      button.classList.remove(
        "bg-gray-100",
        "text-gray-700",
        "hover:enabled:bg-gray-200",
        "hover:enabled:text-gray-800"
      );
      button.classList.add("bg-gg-blue-700", "text-white", "shadow-sm");

      // Dispatch custom event to MotoFiltersBar
      const event = new CustomEvent("tabChange", {
        detail: { tab: button.getAttribute("data-tab") },
      });
      window.dispatchEvent(event);
    });
  });
</script>
